[{"title":"Nginx应用监控","date":"2019-08-27T08:08:36.000Z","path":"2019/08/27/nginx-ying-yong-jian-kong/","text":"Nginx是一个高性能的HTTP和反向代理服务器，同时也提供了IMAP/POP3/SMTP服务，是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3)代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上其并发能力确实在同类型的网页服务器中表现较好。 一、安装Nginx#安装Nginx所需的依赖 [root@localhost ~]# yum install -y gcc glibc gcc-c++ pcre-devel openssl-devel #安装Nginx [root@localhost ~]# cd /usr/local/src [root@localhost src]# wget http://nginx.org/download/nginx-1.16.1.tar.gz #解压 [root@localhost src]# tar zxf nginx-1.16.1.tar.gz [root@localhost src]# ls nginx-1.16.1 nginx-1.16.1.tar.gz #查看相关文件 [root@localhost src]# cd nginx-1.16.1 [root@localhost nginx-1.16.1]# ls auto CHANGES CHANGES.ru conf configure contrib html LICENSE man README src 注：configure是Shell脚本，执行它的作用是生成Makefile（使用Make工具编译C程序，而Make工具需要依赖Makefile） #创建用户 [root@localhost nginx-1.16.1]# useradd -s /sbin/nologin -M www #执行脚本 [root@localhost nginx-1.16.1]# ./configure --prefix=/usr/local/ngnix-1.16.1 --user=www --group=www --with-http_ssl_module --with-http_stub_status_module #之后再查看目录下文件会发现Makefile文件 #编译并将生成的文件拷贝到指定的地方 [root@localhost nginx-1.16.1]# make &amp;&amp; make install #创建软链接 [root@localhost nginx-1.16.1]# cd [root@localhost ~]# ln -s /usr/local/ngnix-1.16.1/ /usr/local/ngnix 二、启动Ngnix服务#查看86端口有没有被占用 [root@localhost ~]# netstat -ntlp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1178/sshd tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN 1281/master tcp6 0 0 :::22 :::* LISTEN 1178/sshd tcp6 0 0 ::1:25 :::* LISTEN 1281/master #启动服务前测试文件 [root@localhost ~]# /usr/local/ngnix/sbin/nginx -t nginx: the configuration file /usr/local/ngnix-1.16.1/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/ngnix-1.16.1/conf/nginx.conf test is successful #启动服务 [root@localhost ~]# /usr/local/ngnix/sbin/nginx 三、配置Nginx[root@localhost ~]# cd /usr/local/ngnix/conf/ [root@localhost conf]# vim nginx.conf ... #在一个服务后加nginx-status server { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } location /nginx-status { stub_status on; access_log off; allow 172.16.137.0/24; deny all; } ... #保存后检测文件是否出错 [root@localhost conf]# /usr/local/ngnix/sbin/nginx -t nginx: the configuration file /usr/local/ngnix-1.16.1/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/ngnix-1.16.1/conf/nginx.conf test is successful # 重启服务 [root@localhost conf]# /usr/local/ngnix/sbin/nginx -s reload #访问 [root@localhost conf]# curl 172.16.137.128/nginx-status Active connections: 1 server accepts handled requests 2 2 2 Reading: 0 Writing: 1 Waiting: 0 #活动链接数1 #成功创建链接次数2 成功创建握手次数2 成功的请求次数2 #当前读取的客户端header的数量0 当前返回给客户端header的数量1 长链接状态下已经处理等待下一次请求的值0 在本机浏览器也可访问，如图所示：","tags":[{"name":"网络运维","slug":"网络运维","permalink":"http://yoursite.com/tags/网络运维/"}]},{"title":"虚拟机使用VMware tools与主机共享文件","date":"2019-08-26T02:52:39.000Z","path":"2019/08/26/xu-ni-ji-shi-yong-vmware-tools-yu-zhu-ji-gong-xiang-wen-jian/","text":"一、VMware Tools介绍VMware Tools是VMware虚拟机中自带的一种增强工具，相当于VirtualBox中的增强功能（Sun VirtualBox Guest Additions），是VMware提供的增强虚拟显卡和硬盘性能、以及同步虚拟机与主机时钟的驱动程序。 只有在VMware虚拟机中安装好了VMware Tools，才能实现主机与虚拟机之间的文件共享，同时可支持自由拖拽的功能，鼠标也可在虚拟机与主机之间自由移动（不用再按ctrl+alt），且虚拟机屏幕也可实现全屏化。 二、安装VMware Tools1.选择虚拟机界面左上角的虚拟机–&gt;重新安装VMware Tools选项。 2.进入CentOS系统 #挂载CD [root@localhost ~]# mount /dev/cdrom /media mount: /dev/sr0 写保护，将以只读方式挂载 #查看安装的VMwareTools版本 [root@localhost ~]# cd /media [root@localhost media]# ls manifest.txt VMwareTools-10.3.10-12406962.tar.gz vmware-tools-upgrader-64 run_upgrader.sh vmware-tools-upgrader-32 #将安装文件拷贝、解压 [root@localhost media]# cp /media/VMwareTools-10.3.10-12406962.tar.gz /tmp/ [root@localhost media]# cd /tmp [root@localhost tmp]# tar -zxf VMwareTools-10.3.10-12406962.tar.gz #安装 [root@localhost tmp]# cd vmware-tools-distrib/ [root@localhost vmware-tools-distrib]# ./vmware-install.pl #之后一路回车，即可安装完毕 3.安装可能会出现内核位置不确定的问题 The path &quot;&quot; is not a valid path to the 3.10.0-957.el7.x86_64 kernel headers. Would you like to change it? [yes] INPUT: [yes] default Enter the path to the kernel header files for the 3.10.0-957.el7.x86_64 kernel? INPUT: [] default 解决方法为指定版本重新安装内核 [root@localhost vmware-tools-distrib]# yum install &quot;kernel-devel-uname-r == $(uname -r)&quot; #然后重新安装 [root@localhost vmware-tools-distrib]# ./vmware-install.pl 三、使用VMware Tools共享文件在主机新建一个文件夹存放于虚拟机共享的文件 在虚拟机界面设置中启用共享文件夹，然后将新建的共享文件夹添加进去 在主机文件夹中新建一个test.txt文件 在虚拟机中查看 [root@localhost ~]# cd /mnt/hgfs/虚拟机共享 [root@localhost 虚拟机共享]# ls test.txt","tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/tags/虚拟机/"}]},{"title":"多维监控体系","date":"2019-08-22T08:07:00.000Z","path":"2019/08/22/duo-wei-jian-kong-ti-xi/","text":"一、监控概述一、监控对象：1.监控对象的理解：CPU是怎么工作的，以及工作原理；2.监控对象的指标：CPU的使用率、CPU的负载、CPU个数;3.确定性能基准线：怎么样才算故障？CPU负载多少算高？ 二、监控范围：1.硬件监控：服务器的硬件故障；2.操作系统监控：CPU、内存、IO、进程；3.应用服务监控；4.业务监控。 二、硬件监控一、服务器监控：IPMIIPMI是一种智能化远程接口标准，Linux就可以使用IPMI实现对服务器的远程监控，IPMI依赖于BMC控制器（一种嵌入式微控制器）， 使用ipmitool实现在Linux下对硬件的监控和控制。 使用ipmitool的条件：硬件和操作系统要支持。（虚拟机无法执行IPMI，可在物理机尝试，不执行关机命令即可） #安装工具 [root@localhost ~]# yum install -y OpenIPMI ipmitool #启动 [root@localhost ~]# systemctl start ipmi 使用IPMI有两种方式：1.本地调用；2.远程调用（通过IP地址，用户名和密码） 二、路由器和交换机监控：SNMP[root@localhost ~]# yum install -y net-snmp net-snmp-utils [root@localhost ~]# cd /etc/snmp [root@localhost snmp]# ls snmpd.conf snmptrapd.conf [root@localhost snmp]# mv snmpd.conf snmpd.conf.bak [root@localhost snmp]# vim snmpd.conf #添加如下内容 rocommunity zzulyt（名称，自己起的团体名） 172.16.137.128（指要收集的机器的IP） [root@localhost snmp]# ll 总用量 28 -rw-r--r-- 1 root root 34 8月 19 20:08 snmpd.conf -rw------- 1 root root 18861 7月 30 01:29 snmpd.conf.bak -rw------- 1 root root 220 7月 30 01:29 snmptrapd.conf #启动服务 [root@localhost snmp]# systemctl start snmpd #查看snmp监听的161端口 [root@localhost snmp]# netstat -nulp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name udp 0 0 0.0.0.0:69 0.0.0.0:* 917/xinetd udp 0 0 0.0.0.0:161 0.0.0.0:* 2711/snmpd 三、SNMP系统的管理信息库（MIB）与OID 1.任何一个被管理的资源都表示成一个对象，称为被管理的对象。MIB是被管理对象的集合。它定义了被管理对象的一系列属性：对象的名称、对象的访问权限和对象的数据类型等。每个SNMP设备（Agent）都有自己的MIB。MIB也可以看作是NMS（网管系统）和Agent之间的沟通桥梁。它们之间的关系如图所示： 2.MIB文件中的变量使用的名字取自ISO和ITU管理的对象标识符（object identifier）名字空间。它是一种分级树的结构。 3.OID(对象标识符)：是SNMP代理提供的具有唯一标识的键值。【MIB（管理信息基）提供数字化OID到可读文本的映射】。 OID可用数字格式表达：长这样“.1.3.6.1.2.1.1.2.0” 子树 1 -&gt; 3 -&gt; 6 -&gt; 1 -&gt; 2 -&gt; 1 -&gt; 1 -&gt; 2 #OID:1.3.6.1.2.1.1.3.0--&gt;监控时间 [root@localhost snmp]# snmpget -v2c -c zzulyt 172.16.137.128 1.3.6.1.2.1.1.3.0 DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (28036) 0:04:40.36 #OID:1.3.6.1.4.1.2021.10.1.3.1--&gt;Load 5 [root@localhost snmp]# snmpget -v2c -c zzulyt 172.16.137.128 1.3.6.1.4.1.2021.10.1.3.1 UCD-SNMP-MIB::laLoad.1 = STRING: 0.01 四、CPU监控1.CPU三个重要的概念上下文切换：CPU调度器实施的进程的切换过程； 运行队列（负载）：负载可以理解为运行队列里单位时间内的排队线程的平均数，（负载只是一个参考值，负载高未必系统繁忙）； 使用率：指运行的程序占用的CPU资源，表示你的机器在某个时间点的运行程序的情况。 2.确定服务类型IO密集型——数据库CPU密集型——web、mail 3.确定性能基准线运行队列：1-3线程；1CPU；4核；负载不超过12（经验值） CPU使用：65%-70%的用户态利用率 30%-35%的内核利用率 0%-5%的空闲利用率 4.监控工具（1）top [root@localhost ~]# top top - 13:09:07 up 17:02, 3 users, load average: 0.04, 0.03, 0.05 Tasks: 105 total, 1 running, 104 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.0 us, 0.3 sy, 0.0 ni, 99.7 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 999696 total, 145684 free, 161652 used, 692360 buff/cache KiB Swap: 2097148 total, 2095184 free, 1964 used. 659484 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 125364 3404 2092 S 0.0 0.3 0:09.59 systemd 2 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kthreadd 3 root 20 0 0 0 0 S 0.0 0.0 0:01.58 ksoftirqd/0 5 root 0 -20 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0H 7 root rt 0 0 0 0 S 0.0 0.0 0:00.00 migration/0 8 root 20 0 0 0 0 S 0.0 0.0 0:00.00 rcu_bh 9 root 20 0 0 0 0 S 0.0 0.0 0:04.28 rcu_sched 10 root rt 0 0 0 0 S 0.0 0.0 0:00.82 watchdog/0 top命令中 P–&gt;按CPU使用率排序 M–&gt;按内存使用率排序 （2）安装sysstat，使用vmstat或mpstat工具 [root@localhost ~]# yum install -y sysstat #每一秒显示一次监控信息，显示10次 [root@localhost ~]# vmstat 1 10 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 2 0 1964 141160 0 696360 0 0 16 15 51 49 0 0 100 0 0 0 0 1964 141160 0 696376 0 0 0 0 76 83 0 0 100 0 0 0 0 1964 141160 0 696376 0 0 0 0 85 92 1 0 99 0 0 0 0 1964 141160 0 696376 0 0 0 0 92 90 0 0 100 0 0 0 0 1964 141160 0 696376 0 0 0 0 96 96 0 0 100 0 0 0 0 1964 141160 0 696376 0 0 0 0 89 90 0 1 99 0 0 0 0 1964 141160 0 696376 0 0 0 0 88 84 0 0 100 0 0 0 0 1964 141160 0 696376 0 0 0 0 82 81 0 0 100 0 0 0 0 1964 141160 0 696376 0 0 0 0 106 110 0 1 99 0 0 0 0 1964 141160 0 696376 0 0 0 0 83 79 0 0 100 0 0 #每一秒显示一次监控信息，显示5次 [root@localhost ~]# mpstat 1 5 Linux 3.10.0-693.el7.x86_64 (localhost.localdomain) 2019年08月22日 _x86_64_ (1 CPU) 13时56分36秒 CPU %usr %nice %sys %iowait %irq %soft %steal %guest %gnice %idle 13时56分37秒 all 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 100.00 13时56分38秒 all 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 99.00 13时56分39秒 all 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 100.00 13时56分40秒 all 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 100.00 13时56分41秒 all 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 100.00 平均时间: all 0.00 0.00 0.20 0.00 0.00 0.00 0.00 0.00 0.00 99.80 五、内存监控vmstat显示的参数说明swpd:已使用的交换分区的大小free：可用的物理内存的大小si：从磁盘交换到内存的交换页数量，单位：KB/秒so：从内存交换到磁盘的交换页数量，单位：KB/秒bi：每秒从块设备接收到的块数，单位：块/秒 也就是读块设备bo：每秒发送到块设备的块数，单位：块/秒 也就是写块设备in：每秒的中断数，包括时钟中断。与cs一般同步增长。in和cs两值越大，会看到由内核消耗的CPU时间（sy）也会越大cs：每秒的环境（上下文）切换次数us：用户CPU时间(非内核进程占用时间)（单位为百分比）。 us的值比较高时，说明用户进程消耗的CPU时间多sy：系统使用的CPU时间（单位为百分比）。sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。id：空闲的CPU的时间(百分比)，在Linux 2.5.41之前，这部分包含IO等待时间。wa：等待IO的CPU时间，在Linux 2.5.41之前，这个值为0 .这个指标意味着CPU在等待硬盘读写操作的时间，用百分比表示。wait越大则机器io性能就越差。说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）st：针对虚拟技术，如果st不为0，说明本来分配给本机的CPU时间被其他虚拟机偷走了 六、系统监控一、硬盘监控通过iotop工具监控硬盘 [root@localhost ~]# yum install iotop [root@localhost ~]# iotop Total DISK READ : 0.00 B/s | Total DISK WRITE : 0.00 B/s Actual DISK READ: 0.00 B/s | Actual DISK WRITE: 0.00 B/s ...... 二、网络监控通过iftop监控网卡的实时流量（可以指定网段）、反向解析IP、显示端口信息等。 [root@localhost ~]# yum install iftop [root@localhost ~]# iftop -n 三、利用nmon监控并分析数据1.去官网下载nmon的二进制文件 2.将文件共享给虚拟机的系统 [root@localhost ~]# cd /mnt/hgfs/虚拟机共享 [root@localhost 虚拟机共享]# chmod +x nmon16e_x86_rhel71 [root@localhost 虚拟机共享]# ./nmon16e_x86_rhel71 3.主机下载nomn_analyzer 下载后的文件夹里包含： 4.将检测结果生成Excel文件 在虚拟机系统中输入监控并将结果生成文件的命令 [root@localhost 虚拟机共享]# ./nmon16e_x86_rhel71 -c 10 -s 10 -f #检查发现多了一个nmon文件，190826表示年月日，1542表示时分 [root@localhost 虚拟机共享]# ls localhost_190826_1542.nmon nmon16e_x86_rhel71 在主机打开nomn_analyzer文件夹中的nmon analyser v61文件，点击Analyze nmon data 选择共享文件夹中的nmon文件，即可生成图表 （底部的表格栏即为监控的参数名称）","tags":[{"name":"网络运维","slug":"网络运维","permalink":"http://yoursite.com/tags/网络运维/"}]},{"title":"VMware中centos在NAT模式下配置静态IP","date":"2019-08-16T05:22:08.000Z","path":"2019/08/16/vmware-zai-nat-mo-shi-xia-pei-zhi-jing-tai-ip/","text":"一、VMware的配置1.虚拟机设置中网络适配器设置为NAT模式 2.点击左上角的编辑–&gt;虚拟网络编辑器，win10系统下更改需要管理员权限 取消DHCP前的对号，然后进入NAT设置，记下子网IP、子网掩码和网关 二、查看本机VMnet8网段（虚拟机网关与VMnet8 ip必须要在同一网段）在cmd命令行下，输入ipconfig查看 三、配置CentOS7相关文件1.修改配置文件 [root@localhost ~]# cd /etc/sysconfig/network-scripts #先查看该目录下相关配置文件名称，有的是ifcfg-ent0,有的是ifcfg-ens33 [root@localhost network-scripts]# vim ifcfg-ens33 TYPE=&quot;Ethernet&quot; PROXY_METHOD=&quot;none&quot; BROWSER_ONLY=&quot;no&quot; BOOTPROTO=&quot;dhcp&quot; DEFROUTE=&quot;yes&quot; IPV4_FAILURE_FATAL=&quot;no&quot; IPV6INIT=&quot;yes&quot; IPV6_AUTOCONF=&quot;yes&quot; IPV6_DEFROUTE=&quot;yes&quot; IPV6_FAILURE_FATAL=&quot;no&quot; IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot; NAME=&quot;ens33&quot; UUID=&quot;7d2dd01c-42fc-4ab6-857b-394690430e9f&quot; DEVICE=&quot;ens33&quot; ONBOOT=&quot;yes&quot; 在文件底部添加 NM_CONTROLLED=no BOOTPROTO=static #设置为静态 IPADDR=172.16.137.128 #自己选择的IP，遵循网络段设置0-255任取 NETMASK=255.255.255.0 #子网掩码，在VMware里看到的 GATEWAY=172.16.137.2 #网关，在NAT设置里看到的 DNS1=172.16.137.2 保存退出 2.查看网关 [root@localhost ~]# cd /etc [root@localhost etc]# cat resolv.conf # Generated by NetworkManager search localdomain nameserver 172.16.137.2 #查看网关是否一致 3.重启网络服务 [root@localhost ~]# service network restart 4.查看IP，并ping外网测试","tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/tags/虚拟机/"}]},{"title":"cobbler部署并自动化安装系统","date":"2019-08-12T15:03:17.000Z","path":"2019/08/12/cobbler-bu-shu-bing-zi-dong-hua-an-zhuang-xi-tong/","text":"一、安装部署1.可以去阿里巴巴开源镜像站寻找所需镜像源（epel–&gt;epel-release-latest-7.noarch.rpm），复制其链接 [root@localhost ~]# rpm -ivh https://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm 2.安装所需软件包 [root@localhost ~]# yum install -y httpd dhcp tftp cobbler cobbler-web pykickstart [root@localhost kickstarts]# yum install xinetd -y 3.查看安装情况 [root@localhost ~]# cd /etc/httpd/conf.d/ #可看到cobbler的相关文件 [root@localhost conf.d]# ll 总用量 36 -rw-r--r--. 1 root root 2926 7月 30 01:18 autoindex.conf -rw-r--r--. 1 root root 1087 11月 27 2018 cobbler.conf -rw-r--r--. 1 root root 1165 11月 27 2018 cobbler_web.conf -rw-r--r--. 1 root root 366 7月 30 01:19 README -rw-r--r--. 1 root root 9443 7月 29 23:15 ssl.conf -rw-r--r--. 1 root root 1252 7月 29 23:15 userdir.conf -rw-r--r--. 1 root root 824 7月 29 23:15 welcome.conf 二、启动进程[root@localhost ~]# systemctl start httpd [root@localhost ~]# systemctl start cobblerd [root@localhost kickstarts]# systemctl start xinetd [root@localhost ~]# cobbler check 新装的系统在运行cobbler check命令后会报错，如图所示 解决方法如下： [root@localhost ~]# getenforce Enforcing [root@localhost ~]# setenforce 0 [root@localhost ~]# getenforce Permissive [root@localhost ~]# service httpd restart Redirecting to /bin/systemctl restart httpd.service 再次查看，所列条数便是接下来的需要做的配置步骤 [root@localhost ~]# cobbler check The following are potential configuration items that you may want to fix: 1 : The &#39;server&#39; field in /etc/cobbler/settings must be set to something other than localhost, or kickstarting features will not work. This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it. 2 : For PXE to be functional, the &#39;next_server&#39; field in /etc/cobbler/settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network. 3 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment: https://github.com/cobbler/cobbler/wiki/Selinux 4 : change &#39;disable&#39; to &#39;no&#39; in /etc/xinetd.d/tftp 5 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run &#39;cobbler get-loaders&#39; to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely. Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The &#39;cobbler get-loaders&#39; command is the easiest way to resolve these requirements. 6 : enable and start rsyncd.service with systemctl 7 : debmirror package is not installed, it will be required to manage debian deployments and repositories 8 : The default password used by the sample templates for newly installed machines (default_password_crypted in /etc/cobbler/settings) is still set to &#39;cobbler&#39; and should be changed, try: &quot;openssl passwd -1 -salt &#39;random-phrase-here&#39; &#39;your-password-here&#39;&quot; to generate new one 9 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them Restart cobblerd and then run &#39;cobbler sync&#39; to apply changes. 三、配置文件1.更改vim etc/cobbler/settings文件中的server，将其改成自己的IP [root@localhost ~]# vim /etc/cobbler/settings #需要更改的部分在文件的第272行和384行 2.将文件中的disable原来的yes改为no [root@localhost ~]# vim /etc/xinetd.d/tftp # default: off # description: The tftp server serves files using the trivial file transfer \\ # protocol. The tftp protocol is often used to boot diskless \\ # workstations, download configuration files to network-aware printers, \\ # and to start the installation process for some operating systems. service tftp { socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /var/lib/tftpboot disable = no per_source = 11 cps = 100 2 flags = IPv4 } 3.开启进程，使文件生效 [root@localhost ~]# systemctl start rsyncd [root@localhost ~]# cobbler get-loaders 4.设置密码 #命令格式： [root@localhost ~]# openssl passwd -1 -salt &#39;random-phrase-here&#39; &#39;your-password-here&#39; #将密码部分填入，命令即可为： [root@localhost ~]# openssl passwd -1 -salt &#39;cobler&#39; &#39;cobler&#39; #将生成的密码全部复制下来 $1$cobler$XJnisBweZJlhL651HxAM00 [root@localhost ~]# vim /etc/cobbler/settings #将密码粘贴到文件的第101行 101 default_password_crypted: &quot;$1$cobler$XJnisBweZJlhL651HxAM00&quot; #242行的0改为1 242 manage_dhcp: 1 [root@localhost ~]# systemctl restart cobblerd [root@localhost ~]# cobbler check 5.配置dhcp文件 [root@localhost ~]# vim /etc/cobbler/dhcp.template #将自己服务器的子网，网关，DNS改入 subnet 10.0.2.0 netmask 255.255.255.0 { option routers 10.0.2.15; option domain-name-servers 10.0.2.15; option subnet-mask 255.255.255.0; range dynamic-bootp 10.0.2.100 10.0.2.254; default-lease-time 21600; max-lease-time 43200; next-server $next_server; class &quot;pxeclients&quot; { match if substring (option vendor-class-identifier, 0, 9) = &quot;PXEClient&quot;; #保存后重启服务，使之生效 [root@localhost ~]# systemctl restart cobblerd [root@localhost ~]# cobbler sync #可查看更改是否生效 [root@localhost ~]# cat /etc/dhcp/dhcpd.conf subnet 10.0.2.0 netmask 255.255.255.0 { option routers 10.0.2.15; option domain-name-servers 10.0.2.15; option subnet-mask 255.255.255.0; range dynamic-bootp 10.0.2.100 10.0.2.254; default-lease-time 21600; max-lease-time 43200; next-server 10.0.2.15; 四、配置kickstart相关服务1.磁盘挂载 [root@localhost ~]# mount /dev/cdrom /mnt mount: /dev/sr0 写保护，将以只读方式挂载 （挂载光盘） #此步骤要等待一段时间 [root@localhost ~]# cobbler import --path=/mnt/ --name=CentOS-7-x86_64 --arch=x86_64 task started: 2019-08-12_212801_import task started (id=Media import, time=Mon Aug 12 21:28:01 2019) Found a candidate signature: breed=redhat, version=rhel6 Found a candidate signature: breed=redhat, version=rhel7 Found a matching signature: breed=redhat, version=rhel7 Adding distros from path /var/www/cobbler/ks_mirror/CentOS-7-x86_64: creating new distro: CentOS-7-x86_64 trying symlink: /var/www/cobbler/ks_mirror/CentOS-7-x86_64 -&gt; /var/www/cobbler/links/CentOS-7-x86_64 creating new profile: CentOS-7-x86_64 associating repos checking for rsync repo(s) checking for rhn repo(s) checking for yum repo(s) starting descent into /var/www/cobbler/ks_mirror/CentOS-7-x86_64 for CentOS-7-x86_64 processing repo at : /var/www/cobbler/ks_mirror/CentOS-7-x86_64 need to process repo/comps: /var/www/cobbler/ks_mirror/CentOS-7-x86_64 looking for /var/www/cobbler/ks_mirror/CentOS-7-x86_64/repodata/*comps*.xml Keeping repodata as-is :/var/www/cobbler/ks_mirror/CentOS-7-x86_64/repodata *** TASK COMPLETE *** 2.可查看完成情况，可发现清单已出现 CentOS-7-x86_64 [root@localhost ~]# cobbler profile list CentOS-7-x86_64 3.使用自己的kickstarts文件 [root@localhost ~]# cd /var/lib/cobbler/kickstarts [root@localhost kickstarts]# vim CentOS-7-x86_64.cfg #将如下内容添至文件中 install url --url=$tree text lang en_US.UTF-8 keyboard us zerombr bootloader --location=mbr # Network information $SNIPPET(&#39;network_config&#39;) timezone --utc Asia/Shanghai authconfig --enableshadow --passalgo=sha512 rootpw --iscrypted $default_password_crypted clearpart --all --initlabel part /boot --fstype xfs --size 500 part swap --size 2000 part / --fstype xfs --size 20000 part /data --fstype xfs --size 30000 firstboot --disable selinux --disabled firewall --disabled logging --level=info reboot %pre $SNIPPET(&#39;log_ks_pre&#39;) $SNIPPET(&#39;kickstart_start&#39;) $SNIPPET(&#39;pre_install_network_config&#39;) # Enable installation monitoring $SNIPPET(&#39;pre_anamon&#39;) %end %packages @base @compat-libraries @debugging @development tree nmap sysstat lrzsz dos2unix telnet iptraf ncurses-devel openssl-devel zlib-devel OpenIPMI-tools screen %end %post systemctl disable postfix.service %end #保存后配置路径，如下指令 [root@localhost kickstarts]# cobbler profile edit --name=CentOS-7-x86_64 --kickstart=/var/lib/cobbler/kickstarts/CentOS-7-x86_64.cfg 4.CentOS7系统安装时使网卡为eth0需要加内核参数，可通过profile加内核参数 [root@localhost kickstarts]# cobbler profile edit --name=CentOS-7-x86_64 --kopts=&#39;net.ifnames=0 biosdevname=0&#39; [root@localhost kickstarts]# cobbler profile report [root@localhost kickstarts]# cobbler sync #以上命令使输出时清空重新生成一遍，使文件生效 [root@localhost kickstarts]# start xinetd #开启tftp服务，如果自动安装时进程卡在tftp，可以尝试关闭防火墙 五、测试1.VMvare上直接新建一个虚拟机，进入后选择相应系统即可自动安装 2.Virtualbox上则先需在管理&gt;&gt;主机网络管理器中，禁止启用DHCP服务，避免发生重复，之后即可新建，启动后自动安装系统。 六、自动化重装#使用该工具实现自动化重装 [root@localhost ~]# yum install -y koan #查看该服务器下可以重装的系统 [root@localhost ~]# koan --server=10.0.2.15 --list=profiles - looking for Cobbler at http://10.0.2.15:80/cobbler_api CentOS-7-x86_64 #--profile后指定想重装成的系统 [root@localhost ~]# koan --replace-self --server=10.0.2.15 --profile=CentOS-7-x86_64 重启即可将现系统重装为设定系统 七、自定义yum源#启动相关服务 [root@localhost ~]# systemctl start httpd.service [root@localhost ~]# systemctl start cobblerd.service #添加源 [root@localhost ~]# cobbler repo add --name=openstack-mitaka --mirror=https://mirrors.aliyun.com/centos/7.6.1810/cloud/x86_64/openstack-stein/ --arch=x86_64 --breed=yum #进行同步 [root@localhost ~]# cobbler reposync","tags":[{"name":"网络运维","slug":"网络运维","permalink":"http://yoursite.com/tags/网络运维/"}]},{"title":"CentOS7下PXE+Kickstart+DHCP+TFTP+HTTP无人值守安装系统","date":"2019-08-11T10:05:28.000Z","path":"2019/08/11/zi-dong-hua-yun-wei/","text":"一、概述（一）什么是PXE​ PXE(Pre boot Execution Environment，预启动执行环境)是由Intel公司开发的最新技术，工作于Client/Server的网络模式，支持工作站通过网络从远端服务器下载映像，并由此支持通过网络启动操作系统，在启动过程中，终端要求服务器分配IP地址，再用TFTP ( trivial file transfer protocol )或MTFTP(multicast trivial file transfer protocol)协议下载一个启动软件包到本机，内存中执行，由这个启动软件包完成终端基本软件设置，从而引导预先安装在服务器中的终端操作系统。 ​ 严格来说，PXE并不是一种安装方式 ，而是种引导方式。 进行PXE安装的必要条件是在要安装的计算机中必须包含个PXE支持的网卡(NIC)， 即网卡中必须要有PXE Client。PXE 协议可以使计算机通过网络启动。此协议分为Client端和Server端，而PXE Client则在网卡的ROM中。当计算机引导时，BIOS把PXE Client调入内存中执行，然后由PXE Client将放置在远端的文件通过网络下载到本地运行。运行PXE协议需要设置DHCP服务器和TFTP服务器。DHCP 服务器会给PXEClient (将要安装系统的主机)分配个IP地址，由于是给PXE Client分配IP地址，所以在配置DHCP服务器时需要增加相应的PXE设置。此外，在PXE Client的ROM中，已经存在了TFTP Client，那么它就可以通过TFTP协议到TFTP Server上下载所需的文件了。 （二）PXE工作过程​ 1.PXE方便通过网络大批量地操作系统的部署。PXE client当按下电源键选择从PXE网络启动，通过广播找到DHCP服务器索取IP； ​ 2.DHCP服务器返回分配给客户机的IP以及PXE文件的放置位置(该文件一般是放在一台TFTP服务器上) ; ​ 3.PXE Client向本网络中的TFTP服务器索取pxelinux.0文件; ​ 4.PXE Client取得pxelinux.0文件后之执行该文件; ​ 5.根据nxelinux 0的执行结里诵过TFTP服务器加载内核和文件系统； ​ 6.进入安装画面，此时可以通过选择HTTP、FTP、NFS方式之一进行安装。 （三）环境准备说明​ PXE服务器：CentOS7基于virtualbox的虚拟机 ​ IP：10.0.2.15 #可通过如下命令查询DNS [root@localhost ~]# cat /etc/resolv.conf ​ DNS：114.114.114.114 ​ 在tftp服务器上要首先由PXE的安装信息，配置服务及安装软件包如下;DHCP；tftp；http；sysliinux（通过yum安装） [root@localhost ~]# yum install dhcp tftp tftp-server syslinux httpd -y #生成ks.cfg文件需要system-config-kickstart工具 [root@localhost ~]# yum install system-config-kickstart -y #此工具依赖于X Windows，所以需安装X Windows和Desktop [root@localhost ~]# yum groupinstall &quot;X Windows System&quot; [root@localhost ~]# yum groupinstall Desktop #重启系统 [root@localhost ~]# reboot 二、基于httpd搭建本地安装源（一）挂载光盘#挂载CentOS7光盘 [root@localhost ~]# mkdir /media/cdrom [root@localhost ~]# mount /dev/cdrom /media/cdrom [root@localhost ~]# mkdir -pv /var/www/html/centos/7/x86_64 #绑定挂载到http默认目录下 [root@localhost ~]#mount --bind /media/cdrom /var/www/html/centos/7/x86_64 （二）kickstart ks.cfg配置文件[root@localhost ~]# cd /var/www/html;mkdir ks [root@localhost ~]# vim anaconda-ks.cfg #version=DEVEL # System authorization information auth --enableshadow --passalgo=sha512 # Use CDROM installation media #cdrom # Install OS instead of upgrade install # Use network installation url --url=http://（自己的IP地址，如：10.0.2.15）/centos/7/x86_64 # Use graphical install graphical # Run the Setup Agent on first boot firstboot --enable #ignoredisk --only-use=sda # Keyboard layouts keyboard --vckeymap=cn --xlayouts=&#39;cn&#39; # System language lang zh_CN.UTF-8 # Network information network --bootproto=dhcp --device=enp0s3 --onboot=off --ipv6=auto network --hostname=localhost.pkey.cn # Root password rootpw --iscrypted $1$lSeSXuy.$7HmGY9vVxEGEGB98qTUuv1 # System timezone timezone Asia/Shanghai --isUtc # System bootloader configuration bootloader --append=&quot; crashkernel=auto&quot; --location=mbr --boot-drive=sda autopart --type=lvm # Partition clearing information clearpart --none --initlabel %packages @^minimal @core kexec-tools vim wget httpd %end %addon com_redhat_kdump --enable --reserve-mb=&#39;auto&#39; %end selinux --disabled #禁用selinux reboot #安装完重启系统 （三）配置启动[root@localhost ~]# systemctl start httpd [root@localhost ~]# systemctl enable httpd （四）查看当前服务状态[root@localhost ~]# systemctl status httpd.service 三、配置DHCP服务（一）配置dhcp服务dhcp配置文件在/etc/dhcp/目录下,默认的配置文件没有,但我们可以在帮助文件中找到模板示例文件加以修改，帮助文件的位置为 /usr/share/doc/dhcp*/dhcpd.conf.sample，也可以自己新建一个dhcpd.conf文件，写入 [root@localhost ~]# vim /etc/dhcp/dhcpd.conf # # DHCP Server Configuration file. # see /usr/share/doc/dhcp*/dhcpd.conf.example # see dhcpd.conf(5) man page option domain-name &quot;pkey.cn&quot;; option domain-name-servers 114.114.114.114; #写入网关 default-lease-time 600; max-lease-time 7200; log-facility local7; subnet 10.0.2.0 netmask 255.255.255.0 { range dynamic-bootp 10.0.2.110 10.0.2.120; option routers 10.0.2.1; next-server 10.0.2.254; #tftp server也是本机,可以分开 filename &quot;pxelinux.0&quot;; #引导文件 } （二）启动与查看[root@localhost ~]# systemctl start dhcpd [root@localhost ~]# systemctl enable dhcpd #查看监听情况 [root@localhost ~]# ss -tunl Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port udp UNCONN 0 0 *:67 *:* udp UNCONN 0 0 *:68 *:* udp UNCONN 0 0 127.0.0.1:323 *:* udp UNCONN 0 0 :::69 :::* （三）查看当前服务状态[root@localhost ~]# systemctl status httpd.service 四、配置tftp服务安装好tftp-server软件包后 默认的数据根目录是/var/lib/tftpboot/ 无须修改,只需要复制一些软件引导文件进来即可 1、相关文件准备 ##引导文件 [root@localhost ~]# cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ #内核文件 [root@localhost ~]# cp /media/cdrom/images/pxeboot/{vmlinuz,initrd.img} /var/lib/tftpboot #引导菜单 [root@localhost ~]# cp /usr/share/syslinux/{chain.c32,mboot.c32,menu.c32,memdisk} /var/lib/tftpboot #制件引导默认文件 [root@localhost ~]# mkdir -pv /var/lib/tftpboot/pxelinux.cfg #在/var/lib/tftpboot/pxelinux.cfg目录下 [root@localhost pxelinux.cfg]# cat default default menu.c32 prompt 5 timeout 30 MENU TITLE CentOS 7 PXE Menu LABEL linux MENU LABEL Install CentOS 7 x86_64 KERNEL vmlinuz APPEND initrd=initrd.img inst.repo=http://（自己的IP）/centos/7/x86_64 ks=http://（自己的IP）/ks/ks.cfg 2、启动配置开机自启 [root@localhost]# systemctl enable tftp [root@localhost]# systemctl start tftp 3、tftp测试 #查看/var/lib/tftpboot/的目录文件结构 [root@localhost tftpboot]# tree -L 2 . ├── chain.c32 ├── initrd.img ├── mboot.c32 ├── memdisk ├── menu.c32 ├── pxelinux.0 ├── pxelinux.cfg │ └── default └── vmlinuz 1 directory, 8 files [root@localhost ~]# cd /var/lib/tpm [root@localhost tpm]# pwd;ls /var/lib/tpm [root@localhost tpm]# tftp 10.0.2.15 tftp&gt; get vmlinuz tftp&gt; quit [root@localhost tpm]# pwd;ls /var/lib/tpm vmlinuz 五、PEX无人值守安装测试（一）修改virtualbox网络管理–&gt;全局设定–&gt;网络–&gt;”仅主机(Host-Only)网络” –&gt;双击vboxnet0 –&gt;把virtualbox自带的仅主机网络的DHCP服务关掉 （二）新建虚拟机和用cdrom安装虚拟的唯一区别是不用挂载镜像,只需要修改新的虚拟机的网络类型为”仅主机(Host-Only)网络” 开机–&gt;按F12选择LAN启动","tags":[{"name":"网络运维","slug":"网络运维","permalink":"http://yoursite.com/tags/网络运维/"}]},{"title":"计算机三级嵌入式学习笔记","date":"2019-08-10T07:20:05.000Z","path":"2019/08/10/ji-suan-ji-san-ji-qian-ru-shi-xue-xi-bi-ji/","text":"前言​ 笔者在大一下学期一时冲动，直接跳过计算机二级报名考计算机三级嵌入式。没错，我觉得我冲动了，当时想着接触一下嵌入式，学点皮毛也好，考个证下来就更好了，结果，看书做题，发现，我高估自己了喔。 ​ 八十块钱报名费极大可能打水漂，但看完书还是认认真真的把题库刷一遍吧，前面八十分基本全是概念啊，全是啊，我滴天，孩子最不擅长的就是背这些balabala的，哭了，孩子快哭了啊！！！太难啦！！！ ​ 做过题记一下笔记吧，加深些印象也好，呜呜呜~ 大致提纲一、嵌入式系统概论1.嵌入式系统及其应用​ （1）嵌入式系统介绍及其特性： ​ 专用性；隐蔽性；资源受限；高可靠性；实时性；软件固化。 ​ （2）嵌入式系统的应用 ​ （3）嵌入式系统的逻辑组成： ​ 软硬件两部分：硬件主体是中央处理器和存储器，它们通过输入/输出（I/O）接口和输入/输出设备与外部世界联系，并借助总线相互连接，这些硬件连同嵌入式软件一同构成完整的嵌入式系统。 ​ （4）嵌入式处理芯片： ​ 嵌入式系统的CPU一般具有四个特点：支持实时处理；低功耗；结构可扩展；集成了测试电路。 ​ （5）目前嵌入式处理芯片类型： ​ 微处理器（MCU）；数字信号处理器（DSP）；微控制器（单片机）；片上系统（SoC）。 ​ （6）嵌入式系统的多种分类方法 ​ 可以按用途分类；按实时性分类；按产品形态分类；按系统的复杂程度分类。 ​ （7）SoC芯片的介绍 ​ （8）IP核及其复用 ​ 软核；固核；硬核。 2.嵌入式系统与数字媒体​ （1）数字（电子）文本 ​ （2）数字图像 ​ （3）数字音频与数字视频 3.数字通信与计算机网络​ （1）数字通信： ​ 模拟通信与数字通信；有线与无线通信。 ​ 调制与解调技术；多路复用技术；交换技术。 ​ （2）计算机网络 ​ （3）互联网 二、嵌入式处理器1.嵌入式处理器概述：​ （1）嵌入式处理器的结构类型 ​ 嵌入式处理器的体系结构按指令集可分为两大类：复杂指令集结构（CISC）及精简指令集结构（RISC）。进一步细分，按存储机制分为冯.诺依曼结构和哈佛结构；按字长分为8位、16位、32位和64位结构；按不同内核系列又可分为51、AVR、PIC、MSP430、MIPS、PowerPC、MC68K、ColdFire、ARM等。 ​ （2）ARM处理器概述 ​ 主要特点：单周期操作；只使用加载、存储（Load/Store）指令访问内存；指令长度固定为32位长；三地址指令格式；指令流水线技术；低功耗设计。 2.典型ARM处理器介绍​ （1）ARM处理器的分类： ​ 经典ARM处理器（T表示支持Thumb指令集，D表示支持片上调试，M表示具有快速的64位乘法，I表示提供片内在线仿真，-S表示该处理器以IP软核的形式提供授权）、ARM Cortex嵌入式处理器（Cortex -M）、ARM Cortex实时嵌入式处理器（Cortex -R）、ARM Cortex应用处理器（Cortex -A）以及ARM Cortex专家处理器。 3.ARM处理器体系结构​ （1）ARM处理器工作状态： ​ ARM状态；Thumb状态及Thumb-2状态；调试状态。 ​ （2）ARM处理器的工作模式： ​ 用户模式（User）；快速中断模式（FIQ）；外部中断模式（IRQ）；管理模式（SVC）；中止模式（ABT）；未定义指令模式（UND）；系统模式（SYS）。 ​ （3）ARM异常种类及优先级 ​ 复位RESET（1）；未定义的指令UND（6）；软件中断SWI（6）；指令预取中止PABT（5）；数据访问中止DABT（2）；外部中断请求IRQ（4）；快速中断请求FIQ（3）。 ​ （4）ARM处理器中的MMU（内存管理单元）；MPU（存储器保护单元）。 4.ARM处理器指令集​ （太多了，不好记，这部分我还是回去看资料吧。。。ε=(´ο｀*)))唉） 5.ARM汇编语言程序设计三、嵌入式系统硬件组成1.嵌入式最小硬件系统​ 电源电路；时钟电路；复位电路；JTAG测试接口。 2.嵌入式处理芯片​ （1）ARM的AMBA总线体系结构及标准 ​ （2）基于ARM内核的嵌入式芯片的硬件组成 ​ 存储器及控制器；中断控制器；DMA控制器；电源管理与时钟控制器；GPIO端口；定时计数组件；模拟通道组件；互联通信组件。 3.嵌入式系统的存储器​ 随机存取存储器；只读存储器；铁电存储器；磁性存储器。 4.I/O接口及常用的I/O设备​ 通用I/O接口GPIO；集成电路互连总线接口I²C；串行外设接口SPI；串行异步通信接口UART；通用串行总线USB；高清多媒体接口HDMI；常用简单输入设备；常用简单输出设备。 5.ARM内核典型嵌入式处理芯片6.嵌入式系统外部通信接口​ 基于UART的RS-232/RS-485接口；CAN总线接口；以太网通信接口；常用无线通信接口。 四、嵌入式系统软件1.嵌入式系统的软件组成​ （1）嵌入式软件的特点： ​ 软件与硬件一体化；软件代码时空效率要求高；软件可裁剪，尽可能去除冗余；软件应用环境复杂，安全性和可靠性要求高；软件开发难度大；软件面向用户、面向商品、面向应用，受限于功能和具体应用环境；软件产业高度分散；软件具有较长的生命周期。 ​ （2）嵌入式软件的软件结构: ​ 简单的轮询结构；带中断的轮询结构；监控式操作系统+应用软件的结构；通用嵌入式操作系统+应用软件的结构。 ​ （3）硬件抽象层与板级支持包 ​ （4）引导加载程序 ​ 引导加载程序的概念和功能；嵌入式操作系统的加载方式；引导加载程序的执行过程；U-Boot简介。 ​ （5）嵌入式系统的设备驱动设备 2.嵌入式操作系统​ （1）实时系统与实时操作系统 ​ 实时系统：硬实时任务；软实时任务；准实时任务。 ​ 实时操作系统：事件驱动；多级中断嵌套处理；细粒度的任务优先级控制；实时抢占式调度。 ​ 实时操作系统的实时性指标：中断延迟时间；任务切换时间；任务抢占时间。 ​ （2）嵌入式操作系统概述 ​ 嵌入式操作系统的特点和分类 ​ 嵌入式操作系统的内核结构：单内核和微内核。 ​ 常用嵌入式操作系统简介。 3.uC/OS嵌入式操作系统​ （1）uC/OS操作系统概述 ​ uC/OS-Ⅱ内核大致可以划分为任务调度、任务管理、时间管理、任务间同步与通信以及内存管理、系统管理等模块。系统管理又包括系统初始化、系统启动、中断管理、时钟中断及事件处理等部分。 ​ （2）uC/OS-Ⅱ的任务及其管理 ​ 任务的程序代码；任务堆栈；任务控制块。 ​ （3）uC/OS-Ⅱ的系统服务 ​ uC/OS-Ⅱ的任务管理服务；uC/OS-Ⅱ的时钟节拍与时间管理服务；uC/OS-Ⅱ的任务间通信与同步服务。 ​ （4）uC/OS-Ⅲ操作系统的改进与提高 ​ 时间片轮转调度；内核对象的数量无限制；任务消息和任务信号；优先级的时钟节拍处理；可针对的时钟节拍处理；可针对处理器体系结构进行优化；时间戳；增强的内置性能测试功能。 五、嵌入式系统的开发1.开发嵌入式系统的基础知识​ （1）嵌入式系统的开发过程 ​ 需求分析与规格说明；系统设计；构件设计；系统集成与测试。 ​ （2）嵌入式系统的开发特点 ​ 使用宿主机-目标机的开发架构；与底层硬件控制程序的关系密切；软硬件资源受限制；需要固化程序。 ​ （3）嵌入式系统的调试 ​ 在线仿真器；片上调试技术-JTAG；驻留监控软件调试；指令集模拟器。 2.系统开发工具软件​ （1）ADS1.2工具软件 ​ （2）RVDS ​ （3）GNU ​ 是一种常用于开发基于Linux操作系统的嵌入式软件的工具套件简称。 结语​ 本篇文章为看完资料书做的大致提纲，梳理知识点与思路，为之后刷题做个铺垫，然鹅好像仍然没有记住多少。。。这知识它不进脑子呀。。。 ​ ​","tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://yoursite.com/tags/嵌入式/"}]},{"title":"树莓派安装配置看门狗","date":"2019-08-04T15:22:06.000Z","path":"2019/08/04/shu-mei-pai-an-zhuang-pei-zhi-kan-men-gou/","text":"看门狗——让树莓派永不死机当利用树莓派做一些需要长期待机的应用时，会遇到的一个问题就是树莓派会因为过热而死机，需要重启树莓派，然后再次开启树莓派上的应用，watchdog（看门狗）这款软件可以帮我们解决这样的麻烦，来实现树莓派永不死机的功能。 1.树莓派本身自带了看门狗模块，因此，我们需在命令行中输入下列命令打开配置文件 sudo modprobe bcm2708_wdog sudo nano /etc/modules 2.在配置文件中添加一行”bcm2708_wdog”，添加完成后，按快捷键Ctrl+O进行保存，按快捷键Ctrl+X退出编辑 3.输入命令安装看门狗软件 sudo apt-get install chkconfig watchdog 4.输入命令打开看门狗配置文件 sudo nano /etc/watchdog.conf 找到”#watchdog-device = /dev/watchdog“一行内容，将“#”去掉 之后便可以自行设定树莓派重启的条件 //用于设定CPU温度重启条件 temperature-device=/sys/class/thermal/thermal_zone0/temp //最大温度为80度，超过80度就会引起重启 max-temperature = 80000 //1分钟最多进程为24个，超过即重启 max-load-1=24 //5分钟最多进程为18个，超过即重启 max-load-5=18 //15分钟最多进程为12个，超过即重启 max-load-15=12 完成配置后，按快捷键Ctrl+O进行保存，按快捷键Ctrl+X退出编辑 5.配置看门狗程序，开机自动运行 chkconfig watchdog on 6.启动看门狗 sudo /etc/init.d/watchdog start","tags":[{"name":"树莓派","slug":"树莓派","permalink":"http://yoursite.com/tags/树莓派/"}]},{"title":"xshell在IP可查且可ping通外网的情况连接不上VirtualBox的解决方法","date":"2019-07-14T12:46:53.000Z","path":"2019/07/14/xshell-lian-jie-bu-shang-virtualbox-de-jie-jue-fang-fa/","text":"​ 笔者在学习Linux的过程中，经常会遇到xshell连接不上虚拟机的情况，而在使用VirtualBox的时候遇到过一次，IP地址可查，在虚拟机中ping外网也能ping通，但xshell却连接不上的情况。 ​ 在网上搜索说是物理机连接虚拟机的网卡配置不对 ：VMware Virtual Ethernet Adapter for VMnet8 ；要将该网卡IP设置为和虚拟机服务器IP在同一个网段，但尝试后仍无效果，后请教大佬得以解决。 ​ 解决方法如下： 1.进入设置界面 2.进入网络设置，并点击高级选项 3.按照如下配置，进行转换 4.登录xshell，配置主机IP 然后即可连接到虚拟机上","tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"数码雨","date":"2019-07-10T02:40:03.000Z","path":"2019/07/10/shu-ma-yu/","text":"有意思的Linux命令：cmatrix在CentOS终端实现数码雨效果闲言少叙，命令如下 1.yum -y install wget 2.wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz 3.tar xvf cmatrix-1.2a.tar.gz 4.跳转到cmatrix-1.2a目录下 命令为 cd cmatrix-1.2a 5.yum install ncurses-devel （过程中会出现 “Is this ok [y/d/N]: ” （ 输入”y”,敲回车即可 6.yum -y install gcc 7.yum -y install gcc-c++ 8.yum install make 9.输入命令 “./configure &amp;&amp; make &amp;&amp; make install” （尤其注意，该命令以“.”开头，不要输入错误） 10.输入cmatrix，即可看到数码雨的情景 cmatrix常用命令如下:cmatrix-a :异步滚动（默认） cmatrix-b :随机粗体 cmatrix-B :全部粗体 cmatrix-o :使用旧风格滚动 cmatrix-x :X window 模式 cmatrix-V :显示版本信息 cmatrix-u :刷新频率，0-9，也就是滚动的快慢 cmatrix-C :显示的颜色，支持green(默认),red,blue,white,yellow,cyan 骇客帝国既视感有木有，但也还蛮现实的，毕竟，这个命令除了装B没啥用。。。","tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"ADC数模转换的学习","date":"2019-07-09T06:33:37.000Z","path":"2019/07/09/adc-shu-mo-zhuan-huan/","text":"一、什么是ADCAnalog-to-Digital Converter的缩写。 指模/数转换器或者模拟/数字转换器。是指将连续变量的模拟信号转换为离散的数字信号的器件。 典型的模拟数字转换器将模拟信号转换为表示一定比例电压值的数字信号。 二、STM32F10x的ADC特点1.12位逐次逼近型的模拟数字转换器； 2.最多带3个ADC控制器； 3.最多支持18个通道，可最多测量16个外部和2个内部信号源； 4.支持单次和连续转换模式； 5.转换结束，注入转换结束，和发生模拟看门狗事件时产生中断； 6.通道0到通道n的自动扫描模式； 7.自动校准； 8.采样间隔可以按通道编程； 9.规则通道和注入通道均有外部触发选项； 10.转换结果支持左对齐或右对齐方式存储在16位数据寄存器 ADC转换时间：最大转换速率 1us。（最大转换速度为1MHz，在ADCCLK=14M，采样周期为1.5个ADC时钟下得到。）； 11.ADC供电要求：2.4V-3.6V； 12.ADC输入范围：VREF- ≤ VIN ≤ VREF+ 三、STM32通道组规则通道组：相当正常运行的程序。最多16个通道。规则通道和它的转换顺序在ADC_SQRx寄存器中选择，规则组转换的总数应写入ADC_SQR1寄存器的L[3:0]中 注入通道组：相当于中断。最多4个通道。注入组和它的转换顺序在ADC_JSQR寄存器中选择。注入组 里转化的总数应写入ADC_JSQR寄存器的L[1:0]中 四、STM32F1的ADC的各通道可以单次，连续，扫描或者间断模式执行。ADC单通道：要求进行一次ADC转换：配置为单次模式使能，扫描模式失能。这样ADC的这个通道，转换一次后，就停止转换。 要求进行连续ADC转换：配置为连续模式使能，扫描模式失能。这样ADC的这个通道，转换一次后，接着进行下一次转换，不断连续。 ADC多通道：要求进行一次ADC转换：配置为单次模式使能，扫描模式使能。这样ADC的多个通道，按照配置的顺序依次转换一次后，就停止转换。 要求进行连续ADC转换：配置为连续模式使能，扫描模式使能。这样ADC的多个通道，按照配置的顺序依次转换一次后，接着进行下一次转换，不断连续。 （扫描模式只在多通道的条件下有效，来使得各个通道按照配置循序依次转换。而单次模式无论在单通道还是多通道下只对这些或者这个通道进行一次转换，连续模式无论是在单通道还是多通道下都对这些或者这个通道不断进行连续的转换。 ） 五、ADC中断规则和注入组转换结束时能产生中断。它们都有独立的中断使能位。 六、配置函数选讲（1）开启PA口时钟和ADC1时钟，设置PA1为模拟输入GPIO_Init();APB2PeriphClockCmd();其中设置分频因子时需注意： RCC_ADCCLKConfig(RCC_PCLK2_Div6); //设置 ADC 分频因子 6//APB2的时钟为72M,而72M/6=12,ADC 最大时间不能超过 14M （2）ADC 规则通道配置函数ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_239Cycles5 );ADC1的通道1，第三个1是指ADC1的通道1在规则序列中序号为1，即第一个转换，最后一个参数表示采样周期为239.5","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"CAN基础知识介绍","date":"2019-05-03T14:56:33.000Z","path":"2019/05/03/can-xue-xi-bi-ji/","text":"CAN通信CAN是控制器局域网络(Controller Area Network, CAN)的简称，已成为汽车计算机控制系统和嵌入式工业控制局域网的标准总线。 一、CAN协议的特点1.多主控制 2.系统柔软性 3.速度快，距离远 4.具有错误检测，错误通知和错误恢复功能 5.故障封闭功能 6.连接节点多 二、物理层特征显性电平对应逻辑：0（CAN_H和CAN_L之差为2V左右） 隐性电平对应逻辑：1（CAN_H和CAN_L之差为0V） 【在CAN总线的起止端都有一个120欧姆的中断电阻，来做阻抗匹配，以减少回波辐射】 三、数据帧（7个段） 1.帧起始：表示数据帧开始的段 2.仲裁段：表示该帧优先级的段 3.控制段：表示数据的字节数及保留位的段 4.数据段：数据的内容，一帧可发送0~8个字节的数据 5.CRC段：检查帧的传输错误的段 6.ACK段：表示确认正常接收的段 7.帧结束：表示数据帧结束的段 （ ID：11位，高位在前，低位在后，基本ID禁止高7位都为隐性，即不能：ID=1111111xxxx ） 四、总线仲裁1.总线空闲时，最先发送的单元获得发送优先权，一旦发送，其他单元无法抢占 2.如果有多个单元同时发送，则连续输出显性电平多的单元，具有较高优先级 五、位时序可根据位时序设置波特率 结语一直觉得通信啥的很玄学，其实还是没能熟练掌握最基本的规则。说玄也玄，但万物有因，了解好通信的基础知识，以后出现问题，才好追根溯源，然后好好解决。","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"C语言的生命周期和作用域","date":"2019-05-03T14:56:33.000Z","path":"2019/05/03/c-yu-yan-de-sheng-ming-zhou-qi-he-zuo-yong-yu/","text":"生命周期：是一个变量存在的周期。 作用域：是一个变量可以被引用的范围。最常见的如：{}、static修饰符等等。 （1）全局变量：作用域：全局作用域（只需要在一个源文件中定义，就可以作用于所有的源文件）； 生命周期：程序运行期一直存在； 引用方法：其他文件如果要使用，必须用extern 关键字声明要引用的全局变量； 内存分布：全局（静态存储区）。 注意：如果再两个文件中都定义了相同名字的全局变量，则连接错误：变量重定义。 （2）全局静态变量：生命周期：程序运行期一直存在； 作用域：文件作用域（只在被定义的文件中可见：static的一个作用就是隐藏） 内存分布：全局（静态存储区）。 定义方法：static关键字，const关键字（注意C/C++意义不同） 注意：只要文件不相互包含，两个不同的文件中是可以定义完全相同的两个全局静态变量的。 （3）静态局部变量：生命周期：程序运行期一直存在；（超过其作用域便无法被引用） 作用域：局部作用域（只在局部作用于可见） 内存分布：全局（静态存储区）。 定义方法：局部作用域中用static定义。 注意：只被初始化一次，多线程中需要加锁保护。 （4）局部变量：生命周期：程序运行处局部作用域 即被销毁。 作用域：局部作用域（只在局部作用于可见） 内存分布：栈区 定义方法：在局部作用域中用auto指示符定义，可省略auto static int c = 1;//全局初始化去（静态全局变量） int a = 0; //全局初始化区(全局变量) char *p1; //全局未初始化区（全局变量） int main(int argc, char const *argv[]) { int b;//存放于栈区（局部变量） char s[] = \"abc\";//s存放于栈区（局部变量） char *p2 ;//栈（局部变量） char *p3 = \"123456\";//p3存放于栈区(局部变量);“123456”存放区文字常量区 static int c = 0;// c存放于全局初始化区（静态局部变量） p1 = (char *)malloc(10); p2 = (char *)malloc(20);//分配得来的10和20字节的区域在堆区； //变量p1、p2指向堆区分配的内存 strcpy(p1, \"123456\");//“123456”存放区文字常量区 return 0; }","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"我的第一篇博客","date":"2019-05-03T12:18:45.000Z","path":"2019/05/03/test/","text":"Hello world！第一篇博客佛系的向世界问好 老羊头以后会好好经营自己的小破站 Hello world！","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]