[{"title":"xshell连接不上VirtualBox的解决方法","date":"2019-07-14T12:46:53.000Z","path":"2019/07/14/xshell连接不上VirtualBox的解决方法/","text":"xshell在IP可查且可ping通外网的情况下连接不上VirtualBox的解决方法 ​ 笔者在学习Linux的过程中，经常会遇到xshell连接不上虚拟机的情况，而在使用VirtualBox的时候遇到过一次，IP地址可查，在虚拟机中ping外网也能ping通，但xshell却连接不上的情况。 ​ 在网上搜索说是物理机连接虚拟机的网卡配置不对 ：VMware Virtual Ethernet Adapter for VMnet8 ；要将该网卡IP设置为和虚拟机服务器IP在同一个网段，但尝试后仍无效果，后请教大佬得以解决。 ​ 解决方法如下： 1.进入设置界面 2.进入网络设置，并点击高级选项 3.按照如下配置，进行转换 4.登录xshell，配置主机IP 然后即可连接到虚拟机上","tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"数码雨","date":"2019-07-10T02:40:03.000Z","path":"2019/07/10/数码雨/","text":"有意思的Linux命令：cmatrix在CentOS终端实现数码雨效果闲言少叙，命令如下 1.yum -y install wget 2.wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz 3.tar xvf cmatrix-1.2a.tar.gz 4.跳转到cmatrix-1.2a目录下 命令为 cd cmatrix-1.2a 5.yum install ncurses-devel （过程中会出现 “Is this ok [y/d/N]: ” （ 输入”y”,敲回车即可 6.yum -y install gcc 7.yum -y install gcc-c++ 8.yum install make 9.输入命令 “./configure &amp;&amp; make &amp;&amp; make install” （尤其注意，该命令以“.”开头，不要输入错误） 10.输入cmatrix，即可看到数码雨的情景 cmatrix常用命令如下:cmatrix-a :异步滚动（默认） cmatrix-b :随机粗体 cmatrix-B :全部粗体 cmatrix-o :使用旧风格滚动 cmatrix-x :X window 模式 cmatrix-V :显示版本信息 cmatrix-u :刷新频率，0-9，也就是滚动的快慢 cmatrix-C :显示的颜色，支持green(默认),red,blue,white,yellow,cyan 骇客帝国既视感有木有，但也还蛮现实的，毕竟，这个命令除了装B没啥用。。。","tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"ADC数模转换的学习","date":"2019-07-09T06:33:37.000Z","path":"2019/07/09/ADC/","text":"ADC数模转换一、什么是ADCAnalog-to-Digital Converter的缩写。 指模/数转换器或者模拟/数字转换器。是指将连续变量的模拟信号转换为离散的数字信号的器件。 典型的模拟数字转换器将模拟信号转换为表示一定比例电压值的数字信号。 二、STM32F10x的ADC特点1.12位逐次逼近型的模拟数字转换器； 2.最多带3个ADC控制器； 3.最多支持18个通道，可最多测量16个外部和2个内部信号源； 4.支持单次和连续转换模式； 5.转换结束，注入转换结束，和发生模拟看门狗事件时产生中断； 6.通道0到通道n的自动扫描模式； 7.自动校准； 8.采样间隔可以按通道编程； 9.规则通道和注入通道均有外部触发选项； 10.转换结果支持左对齐或右对齐方式存储在16位数据寄存器 ADC转换时间：最大转换速率 1us。（最大转换速度为1MHz，在ADCCLK=14M，采样周期为1.5个ADC时钟下得到。）； 11.ADC供电要求：2.4V-3.6V； 12.ADC输入范围：VREF- ≤ VIN ≤ VREF+ 三、STM32通道组规则通道组：相当正常运行的程序。最多16个通道。规则通道和它的转换顺序在ADC_SQRx寄存器中选择，规则组转换的总数应写入ADC_SQR1寄存器的L[3:0]中 注入通道组：相当于中断。最多4个通道。注入组和它的转换顺序在ADC_JSQR寄存器中选择。注入组 里转化的总数应写入ADC_JSQR寄存器的L[1:0]中 四、STM32F1的ADC的各通道可以单次，连续，扫描或者间断模式执行。ADC单通道：要求进行一次ADC转换：配置为单次模式使能，扫描模式失能。这样ADC的这个通道，转换一次后，就停止转换。 要求进行连续ADC转换：配置为连续模式使能，扫描模式失能。这样ADC的这个通道，转换一次后，接着进行下一次转换，不断连续。 ADC多通道：要求进行一次ADC转换：配置为单次模式使能，扫描模式使能。这样ADC的多个通道，按照配置的顺序依次转换一次后，就停止转换。 要求进行连续ADC转换：配置为连续模式使能，扫描模式使能。这样ADC的多个通道，按照配置的顺序依次转换一次后，接着进行下一次转换，不断连续。 （扫描模式只在多通道的条件下有效，来使得各个通道按照配置循序依次转换。而单次模式无论在单通道还是多通道下只对这些或者这个通道进行一次转换，连续模式无论是在单通道还是多通道下都对这些或者这个通道不断进行连续的转换。 ） 五、ADC中断规则和注入组转换结束时能产生中断。它们都有独立的中断使能位。 六、配置函数选讲（1）开启PA口时钟和ADC1时钟，设置PA1为模拟输入GPIO_Init();APB2PeriphClockCmd();其中设置分频因子时需注意： RCC_ADCCLKConfig(RCC_PCLK2_Div6); //设置 ADC 分频因子 6//APB2的时钟为72M,而72M/6=12,ADC 最大时间不能超过 14M （2）ADC 规则通道配置函数ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_239Cycles5 );ADC1的通道1，第三个1是指ADC1的通道1在规则序列中序号为1，即第一个转换，最后一个参数表示采样周期为239.5","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"C语言的生命周期和作用域","date":"2019-05-03T14:56:33.000Z","path":"2019/05/03/C语言的生命周期和作用域/","text":"C语言生命周期和作用域的定义 生命周期：是一个变量存在的周期。 作用域：是一个变量可以被引用的范围。最常见的如：{}、static修饰符等等。 （1）全局变量：作用域：全局作用域（只需要在一个源文件中定义，就可以作用于所有的源文件）； 生命周期：程序运行期一直存在； 引用方法：其他文件如果要使用，必须用extern 关键字声明要引用的全局变量； 内存分布：全局（静态存储区）。 注意：如果再两个文件中都定义了相同名字的全局变量，则连接错误：变量重定义。 （2）全局静态变量：生命周期：程序运行期一直存在； 作用域：文件作用域（只在被定义的文件中可见：static的一个作用就是隐藏） 内存分布：全局（静态存储区）。 定义方法：static关键字，const关键字（注意C/C++意义不同） 注意：只要文件不相互包含，两个不同的文件中是可以定义完全相同的两个全局静态变量的。 （3）静态局部变量：生命周期：程序运行期一直存在；（超过其作用域便无法被引用） 作用域：局部作用域（只在局部作用于可见） 内存分布：全局（静态存储区）。 定义方法：局部作用域中用static定义。 注意：只被初始化一次，多线程中需要加锁保护。 （4）局部变量：生命周期：程序运行处局部作用域 即被销毁。 作用域：局部作用域（只在局部作用于可见） 内存分布：栈区 定义方法：在局部作用域中用auto指示符定义，可省略auto 12345678910111213141516171819static int c = 1;//全局初始化去（静态全局变量）int a = 0; //全局初始化区(全局变量)char *p1; //全局未初始化区（全局变量） int main(int argc, char const *argv[])&#123; int b;//存放于栈区（局部变量） char s[] = \"abc\";//s存放于栈区（局部变量） char *p2 ;//栈（局部变量） char *p3 = \"123456\";//p3存放于栈区(局部变量);“123456”存放区文字常量区 static int c = 0;// c存放于全局初始化区（静态局部变量） p1 = (char *)malloc(10); p2 = (char *)malloc(20);//分配得来的10和20字节的区域在堆区； //变量p1、p2指向堆区分配的内存 strcpy(p1, \"123456\");//“123456”存放区文字常量区 return 0;&#125;","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"CAN基础知识介绍","date":"2019-05-03T14:56:33.000Z","path":"2019/05/03/CAN学习笔记/","text":"CAN通信CAN是控制器局域网络(Controller Area Network, CAN)的简称，已成为汽车计算机控制系统和嵌入式工业控制局域网的标准总线。 笔者由于团队需要，对CAN通信进行学习，并记此笔记，怕忘。。。 一、CAN协议的特点1.多主控制 2.系统柔软性 3.速度快，距离远 4.具有错误检测，错误通知和错误恢复功能 5.故障封闭功能 6.连接节点多 二、物理层特征显性电平对应逻辑：0（CAN_H和CAN_L之差为2V左右） 隐性电平对应逻辑：1（CAN_H和CAN_L之差为0V） 【在CAN总线的起止端都有一个120欧姆的中断电阻，来做阻抗匹配，以减少回波辐射】 三、数据帧（7个段） 1.帧起始：表示数据帧开始的段 2.仲裁段：表示该帧优先级的段 3.控制段：表示数据的字节数及保留位的段 4.数据段：数据的内容，一帧可发送0~8个字节的数据 5.CRC段：检查帧的传输错误的段 6.ACK段：表示确认正常接收的段 7.帧结束：表示数据帧结束的段 （ ID：11位，高位在前，低位在后，基本ID禁止高7位都为隐性，即不能：ID=1111111xxxx ） 四、总线仲裁1.总线空闲时，最先发送的单元获得发送优先权，一旦发送，其他单元无法抢占 2.如果有多个单元同时发送，则连续输出显性电平多的单元，具有较高优先级 五、位时序可根据位时序设置波特率 结语一直觉得通信啥的很玄学，其实还是没能熟练掌握最基本的规则。说玄也玄，但万物有因，了解好通信的基础知识，以后出现问题，才好追根溯源，然后好好解决。","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"我的第一篇博客","date":"2019-05-03T12:18:45.000Z","path":"2019/05/03/test/","text":"Hello world！ 第一篇博客佛系的向世界问好 老羊头以后会好好经营自己的小破站 Hello world！","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]